{"version":3,"sources":["components/styled/text.tsx","apollo/measurer-unit/query.tsx","apollo/budget-template/query.tsx","models/budget_template.ts","pages/methodology/update.tsx"],"names":["Title","props","variant","block","styles","root","marginBottom","children","Subtitle","GET_MEASURER_UNIT","gql","GET_BUDGET_TEMPLATE","ADD_NEW_BUDGET_TEMPLATE","DELETE_BUDGET_TEMPLATE","UPDATE_BUDGET_TEMPLATE","BudgetTemplateClass","listBudgetTemplate","BudgetTemplate","this","__typename","id","item","itemDescription","itemName","measureUnitId","methodologyId","subtotal","permanent","createdAt","Date","updatedAt","itemParent","getNewItemID","split","length","level","getLevel","newID","lastID","currentID","map","currentItem","Number","String","UpdateMethodology","t","useTranslation","keyPrefix","t_basics","form","useParams","isIndex","includes","palette","useTheme","useState","lang","useSelector","selectLanguage","project","selectProject","supportedLanguages","selectSupportedLanguages","unitMeasureData","useQuery","measurerUnitList","setmeasurerUnitList","budgetTemplateData","budgetTemplateClass","useMutation","addNewBudgetTemptaleTodo","deleteBudgetTemptale","updateBudgetTemptale","forms","find","name","structure","items","setItems","useEffect","loading","data","measureUnits","budgetTemplates","useBoolean","suportedLangs","setTrue","setFalse","key","text","i18ncopy","i18n","cloneInstance","defaultNS","fallbackNS","hstackProps","horizontal","tokens","childrenGap","classes","mergeStyleSets","submit_button","height","width","minWidth","fontSize","center","justifyContent","alignItems","display","select","backgroundColor","commandStyles","rootHovered","neutralLighter","icon","color","black","handleAddItem","variables","input","addNewItem","refetchQueries","query","handleDeleteItem","columns","fieldName","ariaLabel","maxWidth","flexGrow","isMultiline","isResizable","isRowHeader","onRender","currenItem","setCurrentItem","timer","setTimeout","clearTimeout","textFieldProps","rows","multiline","resizable","defaultValue","fieldGroup","borderRadius","border","selectors","neutralTertiary","Stack","Text","fontWeight","TextField","value","onChange","event","newValue","currentTarget","NameRender","DescriptionRender","className","target","currentMeasureUnit","selected","MeasureRender","Checkbox","label","ev","isChecked","checked","SubTotalRender","PermanentRender","Fragment","TooltipHost","content","IconButton","iconProps","iconName","onClick","actionsRender","dir","Label","sizeSm","sizeMd","sizeLg","DetailsList","selectionMode","SelectionMode","none","onRenderRow","customStyles","themeLighter","themeLighterAlt","neutralLight","DetailsRow","setKey","layoutMode","DetailsListLayoutMode","justified","selectionPreservedOnEmptyClick","required","componentRef","TextFieldInput","PrimaryButton","paddingRight","Item","SpinButton","min","max","step","incrementButtonAriaLabel","decrementButtonAriaLabel","labelPosition","Position","top","Dropdown","defaultSelectedKey","options"],"mappings":"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","file":"static/js/8.75440419.chunk.js","sourcesContent":["import { ITextStyles, Text } from \"@fluentui/react\";\n\nexport const Title: React.FunctionComponent = (props) => {\n  const styles: ITextStyles = {\n    root: {\n      marginBottom: 20,\n    },\n  };\n\n  return (\n    <Text variant=\"xLarge\" block styles={styles}>\n      {props.children}\n    </Text>\n  );\n};\n\nexport const Subtitle: React.FunctionComponent = (props) => {\n  return (\n    <Text variant=\"medium\" block>\n      {props.children}\n    </Text>\n  );\n};\n","import { gql } from \"@apollo/client\";\n\n\nexport const GET_MEASURER_UNIT = gql`\n    query measurerunit {\n        measureUnits {\n        id\n        name\n        description\n        }\n    }\n`;\n\n","import { gql } from \"@apollo/client\";\n\n\nexport const GET_BUDGET_TEMPLATE = gql`\n    query GET_BUDGET_TEMPLATE {\n        budgetTemplates{\n            id\n            item\n            itemDescription\n            itemName\n            measureUnitId\n            methodologyId\n            subtotal\n            permanent\n            createdAt\n            updatedAt\n        }\n    }\n`;\n\n//---- ADD_NEW_BUDGET_TEMPLATE--------------------------------------------------------------\nexport const ADD_NEW_BUDGET_TEMPLATE = gql`\n    mutation CreateBudgetTemplatePayload($input: CreateBudgetTemplateInput!){\n        createBudgetTemplate(input: $input){\n        budgetTemplate{\n            id\n            item\n            itemDescription\n            itemName\n            measureUnitId\n            methodologyId\n            subtotal\n            permanent\n            createdAt\n            updatedAt\n        }\n        }\n    }\n`;\n\n//---- DELETE_BUDGET_TEMPLATE--------------------------------------------------------------\nexport const DELETE_BUDGET_TEMPLATE = gql`\n    mutation deleteBudgetTemplate ($input: DeleteBudgetTemplateInput!){\n        deleteBudgetTemplate(input: $input){\n            budgetTemplate{\n                id\n                item\n                itemDescription\n                itemName\n                measureUnitId\n                methodologyId\n                subtotal\n                permanent\n                createdAt\n                updatedAt\n            }\n        }\n    }\n`;\n\n//---- DELETE_BUDGET_TEMPLATE--------------------------------------------------------------\nexport const UPDATE_BUDGET_TEMPLATE = gql`\n    mutation updateBudgetTemplate($input: UpdateBudgetTemplateInput!){\n        updateBudgetTemplate(input: $input){\n        budgetTemplate{\n                id\n                item\n                itemDescription\n                itemName\n                measureUnitId\n                methodologyId\n                subtotal\n                permanent\n                createdAt\n                updatedAt\n            }\n        }\n    }\n`;\n\n/* ADD ITEM EXAMPLE\nlet itemNew = {\n    \"item\": \"ITEM\",\n    \"itemDescription\": \"item new description\",\n    \"itemName\": \"item new name\",\n    \"measureUnitId\": 1,\n    \"methodologyId\": 1,\n    \"subtotal\": false,\n    \"permanent\": false\n  }\n*/\n","\nexport interface BudgetTemplateItem {\n    __typename?: \"budgetTemplates\",\n    id?: number, \n    item?: string,\n    itemDescription?: string,\n    itemName?: string,\n    measureUnitId: number, \n    methodologyId: number, \n    subtotal?: boolean,\n    permanent?: boolean,\n    createdAt?: Date, \n    updatedAt?: Date, \n}\n\n\nexport default class BudgetTemplateClass {\n    listBudgetTemplate: BudgetTemplateItem[];\n    BudgetTemplate: BudgetTemplateItem;\n\n    constructor() {\n        this.listBudgetTemplate = [];\n        this.BudgetTemplate = {\n            __typename: \"budgetTemplates\",\n            id: 0,\n            item: '',\n            itemDescription: '',\n            itemName: '',\n            measureUnitId: 0,\n            methodologyId: 0,\n            subtotal: false,\n            permanent: false,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n        }\n    }\n\n    public addNewItem(listBudgetTemplate: BudgetTemplateItem[], itemParent?: BudgetTemplateItem): BudgetTemplateItem {\n        this.listBudgetTemplate = listBudgetTemplate\n\n\n        let itemNew: BudgetTemplateItem = {\n            \"item\": this.getNewItemID(itemParent),\n            \"itemDescription\": \"item new description\",\n            \"itemName\": \"item new name\" ,\n            \"measureUnitId\": 1,\n            \"methodologyId\": 1,\n            \"subtotal\": false,\n            \"permanent\": false\n          }\n\n        return itemNew\n    }\n\n    public getLevel(item?: BudgetTemplateItem): number {\n        if (item && item.item?.split('.').length){\n            return item.item?.split('.').length\n        }\n        return 0\n    }\n\n    public getNewItemID(itemParent?: BudgetTemplateItem) :string {\n        const level = this.getLevel(itemParent)\n        let newID = ''\n\n        if (!itemParent) {\n            let lastID = '0'\n            let currentID = '0'\n\n            this.listBudgetTemplate.map((currentItem) => {\n                if (currentItem.item) {\n                    currentID = currentItem.item?.split('.')[0]\n\n                    if (Number(currentID) > Number(lastID)) {\n                        lastID = currentID\n                    }\n                }\n            })\n\n            newID = String(Number(lastID) + 1)\n        }\n\n        if (itemParent && level === 1) {\n            if (itemParent.item) {\n                let lastID: string[] = [itemParent.item.split('.')[0], '0']\n                let currentID: string[] = [itemParent.item.split('.')[0], '0']\n\n                this.listBudgetTemplate.map((currentItem) => {\n                    if (currentItem.item) {\n                        currentID = currentItem.item?.split('.')\n\n                        if (Number(currentID[1]) > Number(lastID[1])) {\n                            lastID = currentID\n                        }\n                    }\n                })\n\n                newID = itemParent.item.split('.')[0] + '.' + String(Number(lastID[1]) + 1)\n            }\n        }\n\n        if (itemParent && level === 2) {\n            if (itemParent.item) {\n                let lastID: string[] = [itemParent.item.split('.')[0], itemParent.item.split('.')[1], '0']\n                let currentID: string[] = [itemParent.item.split('.')[0], itemParent.item.split('.')[1], '0']\n\n                this.listBudgetTemplate.map((currentItem) => {\n                    if (currentItem.item) {\n                        currentID = currentItem.item?.split('.')\n\n                        if (itemParent.item && \n                            currentID[0] === itemParent.item.split('.')[0] &&  \n                            currentID[1] === itemParent.item.split('.')[1] &&       \n                            Number(currentID[2]) > Number(lastID[2])) {\n                            lastID = currentID\n                        }\n                    }\n                })\n\n                newID = itemParent.item.split('.')[0] + '.' + itemParent.item.split('.')[1] + '.' + String(Number(lastID[2]) + 1)\n            }\n        }\n\n        if (itemParent && level === 3) {\n            if (itemParent.item) {\n                let lastID: string[] = [itemParent.item.split('.')[0], itemParent.item.split('.')[1], itemParent.item.split('.')[2], '0']\n                let currentID: string[] = [itemParent.item.split('.')[0], itemParent.item.split('.')[1], itemParent.item.split('.')[2], '0']\n\n                this.listBudgetTemplate.map((currentItem) => {\n                    if (currentItem.item) {\n                        currentID = currentItem.item?.split('.')\n\n                        if (itemParent.item && \n                            currentID[0] === itemParent.item.split('.')[0] &&  \n                            currentID[1] === itemParent.item.split('.')[1] &&   \n                            currentID[2] === itemParent.item.split('.')[2] &&       \n                            Number(currentID[3]) > Number(lastID[3])) {\n                            lastID = currentID\n                        }\n                    }\n                })\n\n                newID = itemParent.item.split('.')[0] + '.' + itemParent.item.split('.')[1] + '.' + itemParent.item.split('.')[2] + '.' + String(Number(lastID[3]) + 1)\n            }\n        }\n\n        return newID\n    }\n\n    \n    \n}","import { useParams } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"i18n\";\r\nimport { selectProject } from \"store/slices/projectslice\";\r\nimport { useBoolean } from \"@fluentui/react-hooks\";\r\n\r\nimport {\r\n  Checkbox,\r\n  DetailsList,\r\n  DetailsListLayoutMode,\r\n  DetailsRow,\r\n  Dropdown,\r\n  FontWeights,\r\n  IButtonStyles,\r\n  IColumn,\r\n  IconButton,\r\n  IDetailsListProps,\r\n  IDetailsRowStyles,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  IStackProps,\r\n  ITextFieldProps,\r\n  ITextProps,\r\n  Label,\r\n  mergeStyleSets,\r\n  Position,\r\n  PrimaryButton,\r\n  SelectionMode,\r\n  SpinButton,\r\n  Stack,\r\n  Text,\r\n  textAreaProperties,\r\n  TextField,\r\n  TooltipHost,\r\n  useTheme,\r\n} from \"@fluentui/react\";\r\n\r\nimport {\r\n  selectLanguage,\r\n  selectSupportedLanguages,\r\n} from \"store/slices/languageslice\";\r\nimport { Title } from \"components/styled/text\";\r\nimport { Col, Grid, Row } from \"fluentui-react-grid\";\r\nimport TextFieldInput from \"components/inputs/text\";\r\nimport { Field } from \"formik\";\r\nimport { Centered } from \"components/styled/centered\";\r\nimport React, { DetailedHTMLProps, SelectHTMLAttributes, useEffect, useState } from \"react\";\r\nimport ContextualHelpPanel from \"components/sidepanel/contextualhelp\";\r\nimport ContextualHelpContent from \"components/sidepanel/contents/contextualhelp\";\r\nimport BudgetList, { BudgetItemInfo } from \"models/canadian/budget\";\r\nimport { IActivityInfo } from \"models/canadian/actvitiesmatrix\";\r\nimport MeasurerUnitClass, { MeasureUnit } from \"models/measurer-unit\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { GET_MEASURER_UNIT } from \"apollo/measurer-unit/query\";\r\nimport DropdownFieldInput from \"components/inputs/dropdown\";\r\nimport { ADD_NEW_BUDGET_TEMPLATE, DELETE_BUDGET_TEMPLATE, GET_BUDGET_TEMPLATE, UPDATE_BUDGET_TEMPLATE } from \"apollo/budget-template/query\";\r\nimport BudgetTemplateClass, { BudgetTemplateItem } from \"models/budget_template\";\r\nimport { array } from \"yup/lib/locale\";\r\nimport { exec } from \"child_process\";\r\nimport { any } from \"cypress/types/bluebird\";\r\n\r\nexport default function UpdateMethodology() {\r\n  // LOGIC\r\n  const { t } = useTranslation(\"manage\", { keyPrefix: \"form\" });\r\n  const { t: t_basics } = useTranslation(\"basics\", { keyPrefix: \"languages\" });\r\n  const { form } = useParams<{ form: string }>();\r\n  const isIndex = form?.includes(\"index\") ? true : false;\r\n  const { palette } = useTheme();\r\n  const [reload, setReload] = useState(false);\r\n\r\n  // Language\r\n  const lang = useSelector(selectLanguage);\r\n  const project = useSelector(selectProject);\r\n  const supportedLanguages = useSelector(selectSupportedLanguages);\r\n\r\n  //Units measurers\r\n  const unitMeasureData = useQuery(GET_MEASURER_UNIT);\r\n  const [measurerUnitList, setmeasurerUnitList] = useState([]);\r\n\r\n  //Data for budgetTemplates\r\n  const budgetTemplateData = useQuery(GET_BUDGET_TEMPLATE);\r\n  const budgetTemplateClass = new BudgetTemplateClass();\r\n  const [addNewBudgetTemptaleTodo, mutationAddData] = useMutation(ADD_NEW_BUDGET_TEMPLATE)\r\n  const [deleteBudgetTemptale, mutationDeleteBudgetTemplate] = useMutation(DELETE_BUDGET_TEMPLATE)\r\n  const [updateBudgetTemptale, mutationUpdateBudgetTemplate] = useMutation(UPDATE_BUDGET_TEMPLATE)\r\n\r\n  //Data for budget\r\n  const currentForm = project.forms.find((form) => form.name === \"budget\")!;\r\n  const budgetList = currentForm.structure as BudgetList; //Aqui se guarda el json de los budget - Ruta: store/projectslice\r\n  const [items, setItems] = useState(budgetTemplateClass.listBudgetTemplate);\r\n  const [update, setUpdate] = useState(false);\r\n\r\n\r\n  useEffect(() => {    \r\n    //Initializing Units measurers\r\n    if (!unitMeasureData.loading && unitMeasureData.data){\r\n        setmeasurerUnitList(unitMeasureData.data.measureUnits)\r\n    }\r\n\r\n    //Initializing budgetTemplate\r\n    if (!budgetTemplateData.loading && budgetTemplateData.data){\r\n      budgetTemplateClass.listBudgetTemplate = budgetTemplateData.data.budgetTemplates;\r\n      setItems(budgetTemplateClass.listBudgetTemplate);\r\n    }\r\n  });\r\n\r\n  // Panels\r\n  const [\r\n    helpPanelIsOpen,\r\n    { setTrue: openHelpPanel, setFalse: dismissHelpPanel },\r\n  ] = useBoolean(false);\r\n\r\n  const suportedLangs = supportedLanguages.map((key) => {\r\n    return {\r\n      key: key,\r\n      text: t_basics(key),\r\n    };\r\n  });\r\n\r\n  let i18ncopy = i18n.cloneInstance({\r\n    defaultNS: \"forms\",\r\n    fallbackNS: [\"licitations\", \"tutorials\"],\r\n  });\r\n\r\n  // STYLES\r\n  const hstackProps: IStackProps = {\r\n    horizontal: true,\r\n    tokens: {\r\n      childrenGap: 10,\r\n    },\r\n  };\r\n\r\n    // STYLE\r\n    const classes = mergeStyleSets({\r\n      submit_button: {\r\n        height: 35,\r\n        width: 120,\r\n        minWidth: 40,\r\n        fontSize: 14,\r\n      },\r\n      center: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        display: 'flex',\r\n      },\r\n      select: {\r\n        height: 35,\r\n        backgroundColor: 'white',\r\n        width: 100,\r\n        minWidth: 40,\r\n        fontSize: 14,\r\n      },\r\n    });\r\n\r\n    \r\n\r\n    const commandStyles: Partial<IButtonStyles> = {\r\n      root: {\r\n        height: 25,\r\n      },\r\n      rootHovered: {\r\n        backgroundColor: palette.neutralLighter,\r\n      },\r\n      icon: {\r\n        fontSize: 13,\r\n        color: palette.black,\r\n      },\r\n    };\r\n\r\n\r\n  //BUDGET FORM ------------------------------------------------------------------\r\n  if (form === 'budget'){\r\n      //Columns render handler--------------------------\r\n      const NameRender = (item: BudgetTemplateItem) => {\r\n        let [currenItem, setCurrentItem] = useState(item.itemName)\r\n\r\n        useEffect(() => {\r\n          const timer = setTimeout(() => {\r\n            const input = {\r\n              id: item.id,\r\n              item: item.item,\r\n              itemName: currenItem,\r\n              itemDescription: item.itemDescription,\r\n              subtotal: item.subtotal,\r\n              permanent: item.permanent,\r\n              methodologyId: item.methodologyId,\r\n              measureUnitId: item.measureUnitId\r\n            }\r\n\r\n            updateBudgetTemptale({\r\n              variables: { input: input }\r\n            })\r\n\r\n          }, 3000)\r\n\r\n          return () => clearTimeout(timer)\r\n        }, [currenItem])\r\n\r\n\r\n        const changeHandler = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string | undefined) => {\r\n          newValue = event.currentTarget.value;\r\n          setCurrentItem(newValue)\r\n          return newValue\r\n        }\r\n\r\n        const textFieldProps: ITextFieldProps = {\r\n          rows: 1,\r\n          multiline: true,\r\n          resizable: true,\r\n          defaultValue: \"\",\r\n          styles: {\r\n            fieldGroup: {\r\n              borderRadius: \"0 0 2px 2px\",\r\n              border: `1px solid ${palette.neutralLighter}`,\r\n              selectors: {\r\n                \":hover\": {\r\n                  border: `1px solid ${palette.neutralTertiary}`,\r\n                },\r\n              },\r\n            },\r\n          },\r\n        };\r\n\r\n        const textProps: ITextProps = {\r\n          styles: {\r\n            root: {\r\n              fontWeight: 500,\r\n              minWidth: 50,\r\n            },\r\n          },\r\n        };\r\n\r\n        return (\r\n          <Stack horizontal tokens={{ childrenGap: 4 }}>\r\n            <Text {...textProps}>{item.item}- </Text>\r\n            <TextField {...textFieldProps} value={currenItem} onChange={changeHandler} />\r\n          </Stack>\r\n        )\r\n      };\r\n\r\n      const DescriptionRender = (item: BudgetTemplateItem) => {\r\n        let [currenItem, setCurrentItem] = useState(item.itemDescription)\r\n\r\n        useEffect(() => {\r\n          const timer = setTimeout(() => {\r\n            const input = {\r\n              id: item.id,\r\n              item: item.item,\r\n              itemName: item.itemName,\r\n              itemDescription: currenItem,\r\n              subtotal: item.subtotal,\r\n              permanent: item.permanent,\r\n              methodologyId: item.methodologyId,\r\n              measureUnitId: item.measureUnitId\r\n            }\r\n\r\n            updateBudgetTemptale({\r\n              variables: { input: input }\r\n            })\r\n\r\n          }, 3000)\r\n\r\n          return () => clearTimeout(timer)\r\n        }, [currenItem])\r\n\r\n        const changeHandler = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string | undefined) => {\r\n          newValue = event.currentTarget.value;\r\n          setCurrentItem(newValue)\r\n          return newValue\r\n      }\r\n\r\n        const textFieldProps: ITextFieldProps = {\r\n          rows: 1,\r\n          multiline: true,\r\n          resizable: true,\r\n          defaultValue: \"\",\r\n          styles: {\r\n            root: {\r\n              minWidth: 400,\r\n            },\r\n            fieldGroup: {\r\n              borderRadius: \"0 0 2px 2px\",\r\n              border: `1px solid ${palette.neutralLighter}`,\r\n              selectors: {\r\n                \":hover\": {\r\n                  border: `1px solid ${palette.neutralTertiary}`,\r\n                },\r\n              },\r\n            },\r\n          },\r\n        };\r\n    \r\n        const textProps: ITextProps = {\r\n          styles: {\r\n            root: {\r\n              fontWeight: 500,\r\n              minWidth: 50,\r\n            },\r\n          },\r\n        };\r\n    \r\n        return (\r\n          <Stack horizontal tokens={{ childrenGap: 4 }}>\r\n            <TextField {...textFieldProps} value={currenItem} onChange={changeHandler} />\r\n          </Stack>\r\n        )\r\n      };\r\n\r\n      const MeasureRender = (item: BudgetTemplateItem) => {\r\n        if (measurerUnitList){\r\n          const handleChange = (event: any) => {\r\n            if (event.target.value !== '') {\r\n              const input = {\r\n                id: item.id,\r\n                item: item.item,\r\n                itemName: item.itemName,\r\n                itemDescription: item.itemDescription,\r\n                subtotal: item.subtotal,\r\n                permanent: item.permanent,\r\n                methodologyId: item.methodologyId,\r\n                measureUnitId: Number(event.target.value)\r\n              }\r\n\r\n              updateBudgetTemptale({\r\n                variables: { input: input }\r\n              })\r\n            }\r\n          }\r\n          \r\n          return (\r\n            <select name=\"measureUnits\" className={classes.select} onChange={handleChange}>\r\n              <option key='' value='' >seleccionar</option>\r\n              {measurerUnitList.map(( currentMeasureUnit: MeasureUnit ) => (\r\n                    <option key={currentMeasureUnit.id} value={currentMeasureUnit.id} selected={(Number(currentMeasureUnit.id) === Number(item.measureUnitId))? true : false} >\r\n                      {currentMeasureUnit.name}\r\n                    </option>\r\n                ))\r\n              }\r\n            </select>\r\n          );\r\n        }\r\n      };\r\n\r\n      const SubTotalRender = (item: BudgetTemplateItem) => {\r\n        function _onChange(ev?: React.FormEvent<HTMLElement | HTMLInputElement>, isChecked?: boolean) {\r\n          const input  = {\r\n            id: item.id,\r\n            item: item.item,\r\n            itemName: item.itemName,\r\n            itemDescription: item.itemDescription,\r\n            subtotal: isChecked,\r\n            permanent: item.permanent,\r\n            methodologyId: item.methodologyId,\r\n            measureUnitId: item.measureUnitId\r\n          }\r\n\r\n          updateBudgetTemptale({\r\n            variables: { input: input }\r\n          })\r\n        }\r\n\r\n        return (\r\n          <Checkbox label=\"Is subtotal row?\" onChange={_onChange} checked={item.subtotal} />\r\n        );\r\n      };\r\n\r\n      const PermanentRender = (item: BudgetTemplateItem) => {\r\n        function _onChange(ev?: React.FormEvent<HTMLElement | HTMLInputElement>, isChecked?: boolean) {\r\n          const input  = {\r\n            id: item.id,\r\n            item: item.item,\r\n            itemName: item.itemName,\r\n            itemDescription: item.itemDescription,\r\n            subtotal: item.subtotal,\r\n            permanent: isChecked,\r\n            methodologyId: item.methodologyId,\r\n            measureUnitId: item.measureUnitId\r\n          }\r\n\r\n          updateBudgetTemptale({\r\n            variables: { input: input }\r\n          })\r\n        }\r\n\r\n        return (\r\n          <Checkbox label=\"Is permanent row?\" onChange={_onChange} checked={item.permanent} />\r\n        );\r\n      };\r\n\r\n      const actionsRender = (item: BudgetTemplateItem) => {\r\n        return (\r\n          <React.Fragment>\r\n            {budgetTemplateClass.getLevel(item) <= 3 ?( \r\n              <TooltipHost content={t(\"tooltip.add-activity\")}>\r\n                <IconButton\r\n                  iconProps={{ iconName: \"Add\" }}\r\n                  styles={commandStyles}\r\n                  onClick={() => handleAddItem(item)}\r\n                />\r\n              </TooltipHost>\r\n            ) : ''}\r\n                <TooltipHost content={t(\"tooltip.delete-activity\")}>\r\n                  <IconButton\r\n                    iconProps={{ iconName: \"Cancel\" }}\r\n                    styles={commandStyles}\r\n                    onClick={() => handleDeleteItem(item)}\r\n                  />\r\n                </TooltipHost>\r\n            </React.Fragment>\r\n        );\r\n      };\r\n\r\n      // Handlers\r\n      const handleAddItem = (item?: BudgetTemplateItem) => {\r\n          addNewBudgetTemptaleTodo({\r\n            variables: { input: budgetTemplateClass.addNewItem(items, item) },\r\n            refetchQueries: [{ query: GET_BUDGET_TEMPLATE }]\r\n          })\r\n      };\r\n\r\n      const handleDeleteItem = (item: BudgetTemplateItem) => {\r\n        deleteBudgetTemptale({\r\n          variables: { input: { id: item.id } },\r\n          refetchQueries: [{ query: GET_BUDGET_TEMPLATE }]\r\n        })\r\n      };\r\n\r\n      const onRenderRow: IDetailsListProps[\"onRenderRow\"] = (props) => {\r\n        const customStyles: Partial<IDetailsRowStyles> = {};\r\n    \r\n        if (props) {\r\n          const { item } = props;\r\n          switch (budgetTemplateClass.getLevel(item)) {\r\n            case 1:\r\n              customStyles.root = {\r\n                backgroundColor: palette.themeLighter,\r\n                // fontSize: FontSizes.medium,\r\n                \":hover\": {\r\n                  backgroundColor: palette.themeLighter,\r\n                },\r\n              };\r\n              break;\r\n            case 2:\r\n              customStyles.root = {\r\n                backgroundColor: palette.themeLighterAlt,\r\n                \":hover\": {\r\n                  backgroundColor: palette.neutralLight,\r\n                },\r\n              };\r\n              break;\r\n            case 3:\r\n              customStyles.root = {\r\n                \":hover\": {\r\n                  backgroundColor: palette.neutralLighter,\r\n                },\r\n              };\r\n              break;\r\n          }\r\n\r\n          return <DetailsRow {...props} styles={customStyles} />;\r\n        }\r\n        \r\n        return null;\r\n      };\r\n    \r\n      // Columns\r\n      const columns: IColumn[] = [\r\n        {\r\n          key: \"column1\",\r\n          //name: t(`${form}.item-description`),\r\n          name: \"name\",\r\n          fieldName: \"item\",\r\n          ariaLabel: \"item\",\r\n          data: \"string\",\r\n          minWidth: 70,\r\n          maxWidth: 300,\r\n          flexGrow: 1,\r\n          isMultiline: true,\r\n          isResizable: true,\r\n          isRowHeader: true,\r\n          onRender: (item: BudgetTemplateItem) => NameRender(item),\r\n        },\r\n        {\r\n          key: \"column3\",\r\n          //name: t(`${form}.item-description`),\r\n          name: \"Description\",\r\n          fieldName: \"itemDescription\",\r\n          ariaLabel: \"itemDescription\",\r\n          data: \"string\",\r\n          minWidth: 70,\r\n          maxWidth: 400,\r\n          flexGrow: 1,\r\n          isMultiline: true,\r\n          isResizable: true,\r\n          isRowHeader: true,\r\n          onRender: (item: BudgetTemplateItem) => DescriptionRender(item),\r\n        },\r\n        {\r\n          key: \"column4\",\r\n          //name: t(`${form}.item-description`),\r\n          name: \"measureUnitId\",\r\n          fieldName: \"measureUnitId\",\r\n          ariaLabel: \"measureUnitId\",\r\n          data: \"Number\",\r\n          minWidth: 100,\r\n          flexGrow: 1,\r\n          isMultiline: true,\r\n          isResizable: true,\r\n          isRowHeader: true,\r\n          onRender: (item: BudgetTemplateItem) => MeasureRender(item),\r\n        },\r\n        {\r\n          key: \"column5\",\r\n          //name: t(`${form}.item-description`),\r\n          name: \"subtotal\",\r\n          fieldName: \"subtotal\",\r\n          ariaLabel: \"subtotal\",\r\n          data: \"Boolean\",\r\n          minWidth: 180,\r\n          flexGrow: 1,\r\n          isMultiline: true,\r\n          isResizable: true,\r\n          isRowHeader: true,\r\n          onRender: (item: BudgetTemplateItem) => SubTotalRender(item),\r\n        },\r\n        {\r\n          key: \"column6\",\r\n          //name: t(`${form}.item-description`),\r\n          name: \"permanent\",\r\n          fieldName: \"permanent\",\r\n          ariaLabel: \"permanent\",\r\n          data: \"Boolean\",\r\n          minWidth: 180,\r\n          flexGrow: 1,\r\n          isMultiline: true,\r\n          isResizable: true,\r\n          isRowHeader: true,\r\n          onRender: (item: BudgetTemplateItem) => PermanentRender(item),\r\n        },\r\n        {\r\n          key: \"column7\",\r\n          //name: t(`${form}.item-description`),\r\n          name: \"actions\",\r\n          fieldName: \"permanent\",\r\n          ariaLabel: \"permanent\",\r\n          data: \"string\",\r\n          minWidth: 100,\r\n          flexGrow: 1,\r\n          isMultiline: true,\r\n          isResizable: true,\r\n          isRowHeader: true,\r\n          onRender: (item: BudgetTemplateItem) => actionsRender(item),\r\n        },\r\n      ];\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <Title>{isIndex ? t(\"index\") : i18ncopy.t(`${form}.header`)}</Title>\r\n\r\n          {!budgetTemplateData.loading ? (\r\n            <Grid dir=\"ltr\">\r\n              <Row>\r\n                <Col>\r\n                  <Label>{t(`${form}.first-row-button`)}</Label>\r\n                </Col>\r\n                <Col>\r\n                  <IconButton\r\n                    iconProps={{ iconName: \"Add\" }}\r\n                    styles={commandStyles}\r\n                    onClick={() => handleAddItem()}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col sizeSm={12} sizeMd={12} sizeLg={12}>\r\n                  <DetailsList\r\n                    items={items}\r\n                    columns={columns}\r\n                    selectionMode={SelectionMode.none}\r\n                    onRenderRow={onRenderRow}\r\n                    setKey=\"set\"\r\n                    layoutMode={DetailsListLayoutMode.justified}\r\n                    selectionPreservedOnEmptyClick={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Grid>\r\n          ) : 'loading'}\r\n          \r\n        </React.Fragment>\r\n      );\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  if (form === 'budget1'){\r\n    return (\r\n      <>\r\n        <Title>{isIndex ? t(\"index\") : i18ncopy.t(`${form}.header`)}</Title>\r\n\r\n        <Grid dir=\"ltr\">\r\n          <Row>\r\n            <Col sizeLg={4} sizeMd={4} sizeSm={12}>\r\n              <TextField\r\n                required\r\n                label={t(`${form}.item-name`)}\r\n                name=\"item_name\"\r\n                componentRef={TextFieldInput}\r\n              />\r\n            </Col>\r\n            <Col sizeLg={4} sizeMd={4} sizeSm={12}>\r\n              <TextField\r\n                required\r\n                label={t(`${form}.measure-unit-id`)}\r\n                name=\"measure_unit_id\"\r\n                componentRef={TextFieldInput}\r\n              />\r\n            </Col>\r\n            <Col sizeLg={4} sizeMd={4} sizeSm={12}>\r\n              <TextField\r\n                required\r\n                label={t(`${form}.item-parent`)}\r\n                name=\"item_parent\"\r\n                componentRef={TextFieldInput}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sizeLg={12} sizeMd={12} sizeSm={12}>\r\n              <TextField\r\n                required\r\n                label={t(`${form}.item-description`)}\r\n                name=\"item_description\"\r\n                componentRef={TextFieldInput}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sizeLg={4} sizeMd={4} sizeSm={12}>\r\n              <Label>{t(`${form}.subtotal`)}</Label>\r\n              <Checkbox />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sizeLg={12} sizeMd={12} sizeSm={12} className={classes.center} >\r\n              <PrimaryButton text={t(`${form}.submit-button`)} className={classes.submit_button} />\r\n            </Col>\r\n          </Row>\r\n        </Grid>\r\n        <hr />\r\n        <Grid dir=\"ltr\">\r\n          <Row>\r\n            <Col sizeLg={12} sizeMd={12} sizeSm={12}>\r\n              <label>Budget template</label>\r\n            </Col>\r\n          </Row>\r\n          \r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\n  \r\n  \r\n  \r\n  return (\r\n    <Stack\r\n      tokens={{ childrenGap: 12 }}\r\n      styles={{ root: { marginBottom: 8, paddingRight: 40 } }}\r\n    >\r\n      <Title>{isIndex ? t(\"index\") : i18ncopy.t(`${form}.header`)}</Title>\r\n      <Stack {...hstackProps}>\r\n        <Stack.Item>\r\n          {/* Maximal Amount <> */}\r\n          <SpinButton\r\n            label={t(\"amount.maximal-field\")}\r\n            defaultValue=\"0\"\r\n            min={0}\r\n            max={100}\r\n            step={1}\r\n            incrementButtonAriaLabel=\"Increase value by 1\"\r\n            decrementButtonAriaLabel=\"Decrease value by 1\"\r\n            labelPosition={Position.top}\r\n            // styles={styles}\r\n          />\r\n        </Stack.Item>\r\n        <Stack.Item>\r\n          {/* Minimal Amount <> */}\r\n          <SpinButton\r\n            label={t(\"amount.minimal-field\")}\r\n            defaultValue=\"0\"\r\n            min={0}\r\n            max={100}\r\n            step={1}\r\n            incrementButtonAriaLabel=\"Increase value by 1\"\r\n            decrementButtonAriaLabel=\"Decrease value by 1\"\r\n            labelPosition={Position.top}\r\n            // styles={styles}\r\n          />\r\n        </Stack.Item>\r\n        <Stack.Item>\r\n          {/* Top Amount [] */}\r\n          <Label>{t(\"amount.top-field\")}</Label>\r\n          <Checkbox />\r\n        </Stack.Item>\r\n      </Stack>\r\n\r\n      <Stack {...hstackProps}>\r\n        <Stack.Item>\r\n          {/* Maximal Characters <> */}\r\n          <SpinButton\r\n            label={t(\"characters.maximal-field\")}\r\n            defaultValue=\"0\"\r\n            min={0}\r\n            max={100}\r\n            step={1}\r\n            incrementButtonAriaLabel=\"Increase value by 1\"\r\n            decrementButtonAriaLabel=\"Decrease value by 1\"\r\n            labelPosition={Position.top}\r\n            // styles={styles}\r\n          />\r\n        </Stack.Item>\r\n\r\n        {/* Top Characters [] */}\r\n        <Stack.Item>\r\n          <Label>{t(\"characters.top-field\")}</Label>\r\n          <Checkbox />\r\n        </Stack.Item>\r\n      </Stack>\r\n\r\n      {/* Language select*/}\r\n      <Dropdown\r\n        label={t(\"language-field\")}\r\n        defaultSelectedKey={lang}\r\n        // placeholder={t(\"language-select\")}\r\n        options={suportedLangs}\r\n      />\r\n\r\n      {/* Label name */}\r\n      <TextField label={t(\"name-field\")} />\r\n\r\n      {/* Tooltip */}\r\n      <TextField label={t(\"tooltip-field\")} />\r\n\r\n      {/* Definition */}\r\n      <TextField label={t(\"definition-field\")} />\r\n\r\n      {/* Format */}\r\n      <TextField label={t(\"format-field\")} />\r\n    </Stack>\r\n  );\r\n}\r\n\r\n\r\n"],"sourceRoot":""}