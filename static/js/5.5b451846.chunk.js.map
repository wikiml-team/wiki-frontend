{"version":3,"sources":["components/styled/text.tsx","apollo/projects/index.tsx","pages/filemenu/open.tsx"],"names":["Title","props","variant","block","styles","root","marginBottom","children","Subtitle","GET_PROJECTS","gql","OpenPage","t","useTranslation","keyPrefix","t_basics","columns","key","name","fieldName","minWidth","maxWidth","data","onRender","item","IconRender","DescriptionRender","DateRender","palette","useTheme","project","useBoolean","isFavorite","toggleIsFavorite","toggle","starIconProps","iconName","color","yellowDark","accent","content","iconProps","onClick","methodology","Fragment","owner","date","Date","dateModified","toLocaleDateString","text","style","height","lineHeight","display","verticalAlign","onRenderRow","customStyles","backgroundColor","neutralLight","useQuery","loading","error","projects","map","MapToProjectRow","recentProjects","filter","p","pdate","now","Math","ceil","abs","sort","p1","p2","slice","tokens","childrenGap","Item","length","items","selectionMode","SelectionMode","none","isHeaderVisible","layoutMode","DetailsListLayoutMode","fixedColumns","aria-label","id","shortName","createdAt"],"mappings":"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","file":"static/js/5.5b451846.chunk.js","sourcesContent":["import { ITextStyles, Text } from \"@fluentui/react\";\n\nexport const Title: React.FunctionComponent = (props) => {\n  const styles: ITextStyles = {\n    root: {\n      marginBottom: 20,\n    },\n  };\n\n  return (\n    <Text variant=\"xLarge\" block styles={styles}>\n      {props.children}\n    </Text>\n  );\n};\n\nexport const Subtitle: React.FunctionComponent = (props) => {\n  return (\n    <Text variant=\"medium\" block>\n      {props.children}\n    </Text>\n  );\n};\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_PROJECTS = gql`\r\n  query GetProjects {\r\n    projects {\r\n      id\r\n      shortName\r\n      largeName\r\n      description\r\n      languageId\r\n      programId\r\n      projectStatusId\r\n      public\r\n      sectorId\r\n      currencyCode\r\n      durationPlan\r\n      methodology {\r\n        id\r\n        name\r\n      }\r\n      intermediateOutcomes {\r\n        id\r\n      }\r\n      projectPermissions {\r\n        id\r\n        userId\r\n      }\r\n      solicitedBudget\r\n      ultimateOutcome {\r\n        id\r\n        description\r\n        what\r\n        where\r\n      }\r\n      wikimlCode\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { GetProjects, GetProjects_projects } from \"types\";\nimport { GET_PROJECTS } from \"apollo/projects\";\nimport QueryStateIndicator from \"apollo/indicator\";\n\nimport {\n  DetailsList,\n  Stack,\n  Text,\n  IColumn,\n  TooltipHost,\n  IconButton,\n  SelectionMode,\n  DetailsListLayoutMode,\n  useTheme,\n  IDetailsListProps,\n  IDetailsRowStyles,\n  DetailsRow,\n  Icon,\n  ITextStyles,\n} from \"@fluentui/react\";\nimport { useBoolean } from \"@fluentui/react-hooks\";\n\nimport { Subtitle, Title } from \"components/styled/text\";\n\ninterface IProject {\n  key: string;\n  name: string;\n  methodology: string;\n  owner: string;\n  dateModified: string;\n  isFavorite?: boolean;\n}\n\n// Open: recent projects, new shared project, all\nexport default function OpenPage() {\n  // LOGIC\n  const { t } = useTranslation(\"filemenu\", { keyPrefix: \"open\" });\n  const { t: t_basics } = useTranslation(\"basics\");\n\n  const columns: IColumn[] = [\n    {\n      key: \"column1\",\n      name: \"icon\",\n      fieldName: \"icon\",\n      minWidth: 10,\n      maxWidth: 35,\n      data: \"string\",\n      onRender: (item: IProject) => IconRender(item),\n    },\n    {\n      key: \"column2\",\n      name: \"description\",\n      fieldName: \"description\",\n      minWidth: 300,\n      data: \"string\",\n      onRender: (item: IProject) => DescriptionRender(item),\n    },\n    {\n      key: \"column3\",\n      name: \"date\",\n      fieldName: \"date\",\n      minWidth: 200,\n      data: \"string\",\n      onRender: (item: IProject) => DateRender(item),\n    },\n  ];\n  \n  // STYLES\n  const { palette } = useTheme();\n  \n  const IconRender = (project: IProject) => {\n    // default value project.isFavorite\n    const [isFavorite, { toggle: toggleIsFavorite }] = useBoolean(false);\n\n    const handleOnClick = () => {\n      toggleIsFavorite();\n      // update in database\n    };\n\n    const starIconProps = {\n      iconName: \"FavoriteStarFill\",\n      styles: {\n        root: {\n          color: isFavorite ? palette.yellowDark : palette.accent,\n        },\n      },\n    };\n\n    return (\n      <TooltipHost content={isFavorite ? t(\"isfavorite\") : t(\"notfavorite\")}>\n        <IconButton iconProps={starIconProps} onClick={handleOnClick} />\n      </TooltipHost>\n    );\n  };\n\n  const DescriptionRender = (project: IProject) => {\n    const name = `${project.name} - `;\n    const methodology = t_basics([\n      `methodologies.${project.methodology}`,\n      project.methodology,\n    ]);\n\n    return (\n      <React.Fragment>\n        <Text variant=\"medium\">{name}</Text>\n        <Text variant=\"small\">{methodology}</Text>\n\n        <Text variant=\"smallPlus\" block>\n          {project.owner}\n        </Text>\n      </React.Fragment>\n    );\n  };\n\n  const DateRender = (project: IProject) => {\n    const date = new Date(project.dateModified).toLocaleDateString();\n    const text = `${t(\"date\")} ${date}`;\n\n    const spanStyles: ITextStyles = {\n      root: {\n        display: \"inline-block\",\n        verticalAlign: \"middle\",\n        lineHeight: \"normal\",\n      },\n    };\n\n    return (\n      <div\n        style={{\n          height: \"100%\",\n          lineHeight: \"inherit\",\n        }}\n      >\n        <Text variant=\"small\" styles={spanStyles}>\n          {text}\n        </Text>\n      </div>\n    );\n  };\n\n  const onRenderRow: IDetailsListProps[\"onRenderRow\"] = (props) => {\n    const customStyles: Partial<IDetailsRowStyles> = {\n      root: {\n        backgroundColor: palette.neutralLight,\n      },\n    };\n\n    if (props) {\n      return <DetailsRow {...props} styles={customStyles} />;\n    }\n    return null;\n  };\n\n  // DATA\n  const { data, loading, error } = useQuery<GetProjects>(GET_PROJECTS);\n\n  if (!data || loading || error)\n    return <QueryStateIndicator data={data} loading={loading} error={error} />;\n\n  // All projects\n  const projects: IProject[] =\n    data?.projects.map((project) => MapToProjectRow(project, t_basics)) ||\n    ([] as IProject[]);\n\n  // Filter Recent projects\n  const recentProjects: IProject[] = projects\n    .filter((p) => {\n      const pdate = new Date(p.dateModified);\n      const now = new Date();\n      // @ts-ignore\n      const diffDays = Math.ceil(Math.abs(pdate - now) / (1000 * 60 * 60 * 24));\n      return diffDays < 20;\n    })\n    // @ts-ignore\n    .sort((p1, p2) => p1.dateModified - p2.dateModified)\n    .slice(0, 3);\n\n\n  return (\n    <React.Fragment>\n      <Title>{t(\"header\")}</Title>\n\n      <Stack tokens={{ childrenGap: 20 }}>\n        <Stack.Item>\n          <Subtitle>{t(\"recent\")}</Subtitle>\n          {recentProjects.length > 0 ? (\n            <DetailsList\n              items={recentProjects}\n              columns={columns}\n              selectionMode={SelectionMode.none}\n              isHeaderVisible={false}\n              onRenderRow={onRenderRow}\n              layoutMode={DetailsListLayoutMode.fixedColumns}\n            />\n          ) : (\n            t(\"shared-null\")\n          )}\n        </Stack.Item>\n\n        <Stack.Item>\n          <Subtitle>\n            {t(\"shared\")}{\" \"}\n            <TooltipHost content={t(\"shared-info\")}>\n              <Icon iconName=\"Info\" aria-label=\"info\" />\n            </TooltipHost>\n          </Subtitle>\n\n          {t_basics(\"unsupported\")}\n        </Stack.Item>\n\n        <Stack.Item>\n          <Subtitle>{t(\"all\")}</Subtitle> <br />\n          <DetailsList\n            items={projects}\n            columns={columns}\n            selectionMode={SelectionMode.none}\n            isHeaderVisible={false}\n            onRenderRow={onRenderRow}\n            layoutMode={DetailsListLayoutMode.fixedColumns}\n          />\n        </Stack.Item>\n      </Stack>\n    </React.Fragment>\n  );\n}\n\nconst MapToProjectRow = (project: GetProjects_projects, t: Function) => {\n  const methodology = project.methodology.name || \"\";\n\n  return {\n    key: project.id,\n    name: project.shortName,\n    methodology: t(methodology, methodology),\n    dateModified: project.createdAt,\n    owner: \"Owner\",\n    // isFavorite: project.isFavorite\n  } as IProject;\n};\n"],"sourceRoot":""}